/* Auto-generated by genmsg_cpp for file /home/henrylu/henry_sandbox/jacobian_listener/srv/ReturnJacobian.srv */
#ifndef JACOBIAN_LISTENER_SERVICE_RETURNJACOBIAN_H
#define JACOBIAN_LISTENER_SERVICE_RETURNJACOBIAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace jacobian_listener
{
template <class ContainerAllocator>
struct ReturnJacobianRequest_ {
  typedef ReturnJacobianRequest_<ContainerAllocator> Type;

  ReturnJacobianRequest_()
  {
  }

  ReturnJacobianRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ReturnJacobianRequest
typedef  ::jacobian_listener::ReturnJacobianRequest_<std::allocator<void> > ReturnJacobianRequest;

typedef boost::shared_ptr< ::jacobian_listener::ReturnJacobianRequest> ReturnJacobianRequestPtr;
typedef boost::shared_ptr< ::jacobian_listener::ReturnJacobianRequest const> ReturnJacobianRequestConstPtr;


template <class ContainerAllocator>
struct ReturnJacobianResponse_ {
  typedef ReturnJacobianResponse_<ContainerAllocator> Type;

  ReturnJacobianResponse_()
  : jacobian()
  {
  }

  ReturnJacobianResponse_(const ContainerAllocator& _alloc)
  : jacobian(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _jacobian_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  jacobian;


  typedef boost::shared_ptr< ::jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jacobian_listener::ReturnJacobianResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ReturnJacobianResponse
typedef  ::jacobian_listener::ReturnJacobianResponse_<std::allocator<void> > ReturnJacobianResponse;

typedef boost::shared_ptr< ::jacobian_listener::ReturnJacobianResponse> ReturnJacobianResponsePtr;
typedef boost::shared_ptr< ::jacobian_listener::ReturnJacobianResponse const> ReturnJacobianResponseConstPtr;

struct ReturnJacobian
{

typedef ReturnJacobianRequest Request;
typedef ReturnJacobianResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ReturnJacobian
} // namespace jacobian_listener

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jacobian_listener/ReturnJacobianRequest";
  }

  static const char* value(const  ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::jacobian_listener::ReturnJacobianResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dd1586518916317e3922f53e1c2cb523";
  }

  static const char* value(const  ::jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdd1586518916317eULL;
  static const uint64_t static_value2 = 0x3922f53e1c2cb523ULL;
};

template<class ContainerAllocator>
struct DataType< ::jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jacobian_listener/ReturnJacobianResponse";
  }

  static const char* value(const  ::jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] jacobian\n\
\n\
";
  }

  static const char* value(const  ::jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReturnJacobianRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.jacobian);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReturnJacobianResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<jacobian_listener::ReturnJacobian> {
  static const char* value() 
  {
    return "dd1586518916317e3922f53e1c2cb523";
  }

  static const char* value(const jacobian_listener::ReturnJacobian&) { return value(); } 
};

template<>
struct DataType<jacobian_listener::ReturnJacobian> {
  static const char* value() 
  {
    return "jacobian_listener/ReturnJacobian";
  }

  static const char* value(const jacobian_listener::ReturnJacobian&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dd1586518916317e3922f53e1c2cb523";
  }

  static const char* value(const jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jacobian_listener/ReturnJacobian";
  }

  static const char* value(const jacobian_listener::ReturnJacobianRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dd1586518916317e3922f53e1c2cb523";
  }

  static const char* value(const jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jacobian_listener/ReturnJacobian";
  }

  static const char* value(const jacobian_listener::ReturnJacobianResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // JACOBIAN_LISTENER_SERVICE_RETURNJACOBIAN_H

